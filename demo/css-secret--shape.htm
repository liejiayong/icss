<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>shape</title>
</head>

<body style="background: rgba(0,0,0,.1);display:flex;flex-wrap:wrap;">

    <p style="width: 100vw;">border-radius</p>
    <div style="width:200px;height:200px;margin: 100px;
                border: 16px solid red;
                border-radius: 10px 0 20px 10px;
        ">
        border-radius
    </div>

    <h2 style="width: 100vw;">伪类::before</h2>
    <style>
        .btn1 {
            position: relative;
            /* 其他的文字颜色、内边距等样式…… */
        }

        .btn1::before {
            content: '';
            /* 用伪元素来生成一个矩形 */
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            z-index: -1;
            background: #58a;
            transform: skew(45deg);
        }
    </style>
    <div style="width:200px;height:200px;margin: 100px;
        " class="btn1">
        ::before 平行四边形 transform: skew(45deg);
    </div>

    <h2 style="width: 100vw;"> 菱形图片</h2>
    <style>
        .picture {
            width: 400px;
            transform: rotate(45deg);
            overflow: hidden;
        }

        .picture>img {
            max-width: 100%;
            transform: rotate(-45deg) scale(1.42);
        }

        .picture>.ploygon {
            clip-path: polygon(50% 0, 100% 50%,
                    50% 100%, 0 50%);
            transition: 1s clip-path;
        }

        .picture>.ploygon:hover {
            clip-path: polygon(0 0, 100% 0,
                    100% 100%, 0 100%);
        }
    </style>

    <h3 style="width: 100vw;"> - 使用transform存在兼容性问题</h3>
    <div class="picture">
        <img src="../../docs/images/angular.png" alt="..." />
    </div>

    <h3 style="width: 100vw;"> - 使用SVG的polygon完美兼容性</h3>

    <div class="picture">
        <img src="../../docs/images/angular.png" alt="..." class="ploygon" />
    </div>

    <h2 style="width: 100vw;"> 切角效果</h2>

    <div style="width:200px;height:200px;margin: 100px;
    background: #58a;
    background:
    linear-gradient(135deg, transparent 15px, #58a 0)
    top left,
    linear-gradient(-135deg, transparent 15px, #58a 0)
    top right,
    linear-gradient(-45deg, transparent 15px, #58a 0)
    bottom right,
    linear-gradient(45deg, transparent 15px, #58a 0)
    bottom left;
    background-size: 50% 50%;
    background-repeat: no-repeat;
        ">
        三角形切角
    </div>

    <h2 style="width: 100vw;"> 弧形切角</h2>

    <div style="width:200px;height:200px;margin: 100px;
    background: #58a;
    background:
    radial-gradient(circle at top left,
    transparent 15px, #58a 0) top left,
    radial-gradient(circle at top right,
    transparent 15px, #58a 0) top right,
    radial-gradient(circle at bottom right,
    transparent 15px, #58a 0) bottom right,
    radial-gradient(circle at bottom left,
    transparent 15px, #58a 0) bottom left;
    background-size: 50% 50%;
    background-repeat: no-repeat;
        ">
        弧形切角
    </div>

    <h2 style="width: 100vw;"> 内联 SVG 与 border-image 方案</h2>

    <div style="width:200px;height:200px;margin: 100px;
        border: 20px solid transparent;
        border-image: url('data:image/svg+xml;utf8,<svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;3&quot; height=&quot;3&quot; fill=&quot;%2358a&quot;><polygon points=&quot;0,1 1,0 2,0 3,1 3,2 2,3 1,3 0,2&quot;/></svg>');
        background: #58a;
        background-clip: padding-box;
        ">
        border-image方案效果1
    </div>

    <div style="width:200px;height:200px;margin: 100px;
        border: 20px solid #58a;
        border-image: url('data:image/svg+xml;utf8,<svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;3&quot; height=&quot;3&quot; fill=&quot;%2358a&quot;><polygon points=&quot;0,1 1,0 2,0 3,1 3,2 2,3 1,3 0,2&quot;/></svg>');
        background: #58a;
        background-clip: padding-box;
        ">
        border-image方案效果2
    </div>

    <div style="width:200px;height:200px;margin: 100px;
        background: #58a;
        padding:20px;
        clip-path: polygon(
        20px 0, calc(100% - 20px) 0, 100% 20px,
        100% calc(100% - 20px), calc(100% - 20px) 100%,
        20px 100%, 0 calc(100% - 20px), 0 20px
        );
        ">
        clip-path方案
    </div>

    <h2> 梯形标签页</h2>
    <style>
        .tab {
            position: relative;
            display: inline-block;
            padding: .5em 1em .35em;
            color: white;
        }

        .tab::before {
            content: '';
            /* 用伪元素来生成一个矩形 */
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            z-index: -1;
            background: #58a;
            transform: scaleY(1.3) perspective(.5em) rotateX(5deg);
            transform-origin: bottom;
        }
    </style>
    <div style="width:50px;height:50px;margin: 100px;
        " class="tab">
        梯形标签页
    </div>
    <style>
        nav>a {
            position: relative;
            display: inline-block;
            padding: .3em 1em 0;
            margin-right: -20px;
        }

        nav>a::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            z-index: -1;
            background: #ccc;
            background-image: linear-gradient(hsla(0, 0%, 100%, .6),
                    hsla(0, 0%, 100%, 0));
            border: 1px solid rgba(0, 0, 0, .4);
            border-bottom: none;
            border-radius: .5em .5em 0 0;
            box-shadow: 0 .15em white inset;
            transform: perspective(.5em) rotateX(5deg);
            transform-origin: bottom;
        }
    </style>
    <nav>
        梯形标签页
        <a style="width:50px;height:50px;
            ">Home
        </a>
        <a style="width:50px;height:50px;
            ">About
        </a>
        <a style="width:50px;height:50px;
            ">Project
        </a>

    </nav>

    <h2>简单的饼图：CSS 渐变，基本的 SVG，CSS 动画，“条纹背景”，“自适应的椭圆”</h2>
    <style>
        .pie {
            position: relative;
            width: 200px;
            line-height: 200px;
            border-radius: 50%;
            background: yellowgreen;
            background-image: linear-gradient(to right, transparent 50%, #655 0);
            /* color: transparent; */
            text-align: center;
        }

        @keyframes spin {
            to {
                transform: rotate(.5turn);
            }
        }

        @keyframes bg {
            50% {
                background: #655;
            }
        }

        .pie::before {
            content: '';
            position: absolute;
            top: 0;
            left: 50%;
            width: 50%;
            height: 100%;
            border-radius: 0 100% 100% 0 / 50%;
            background-color: inherit;
            transform-origin: left;
            animation: spin 50s linear infinite,
                bg 100s step-end infinite;
            animation-play-state: paused;
            animation-delay: inherit;
        }
    </style>
    <div class="pie">animation方案</div>
    <div class="pie" style="animation-delay: -20s"></div>
    <div class="pie" style="animation-delay: -60s"></div>
    <script>
        $$('.pie').forEach(function (pie) {
            var p = parseFloat(pie.textContent);
            pie.style.animationDelay = '-' + p + 's';
        });
    </script>


    <style>
        circle {
            fill: yellowgreen;
            stroke: #655;
            stroke-width: 50;
            stroke-dasharray: 60 158;
            /* 2π × 25 ≈ 158 */
        }

        svg {
            transform: rotate(-90deg);
            background: yellowgreen;
            border-radius: 50%;
        }

        @keyframes fillup {
            to {
                stroke-dasharray: 158 158;
            }
        }

        circle {
            fill: yellowgreen;
            stroke: #655;
            stroke-width: 50;
            stroke-dasharray: 0 158;
            animation: fillup 5s linear infinite;
        }
    </style>
    <svg width="100" height="100">
        svg方案
        <circle r="25" cx="50" cy="50" />
    </svg>
    <style>
        .piejs,
        .piesvg {
            width: 100px;
            height: 100px;
            transform: rotate(-90deg);
            background: yellowgreen;
            border-radius: 50%;
            color: #fff;
        }

        .piesvg circle,
        .piejs circle {
            fill: yellowgreen;
            stroke: #655;
            stroke-width: 32;
            stroke-dasharray: 38 100;
            /* 可得到比率为38%的扇区 */
        }
    </style>
    <svg viewBox="0 0 32 32" class="piesvg">
        svg方案简化
        <circle r="16" cx="16" cy="16" />
    </svg>

    <div class="piejs"></div>
    <div class="piejs"></div>
    <script>
        $$('.piejs').forEach(function (pie) {
            var p = parseFloat(pie.textContent);
            var NS = "http://www.w3.org/2000/svg";
            var svg = document.createElementNS(NS, "svg");
            var circle = document.createElementNS(NS, "circle");
            var title = document.createElementNS(NS, "title");
            circle.setAttribute("r", 16);
            circle.setAttribute("cx", 16);
            circle.setAttribute("cy", 16);
            circle.setAttribute("stroke-dasharray", p + " 100");
            svg.setAttribute("viewBox", "0 0 32 32");
            title.textContent = pie.textContent;
            pie.textContent = '';
            svg.appendChild(title);
            svg.appendChild(circle);
            pie.appendChild(svg);
        });
    </script>

    <div style="width:200px;height:200px;margin: 100px;
border-radius: 50%;
background: conic-gradient(#655 40%, yellowgreen 0);
">
        未来的饼状conic-gradient(deeppink 20%, #fb3 0, #fb3 30%, yellowgreen 0);
    </div>
</body>

</html>
